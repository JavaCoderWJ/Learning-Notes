Ajax技术简介
  Ajax（Asynchronous JavaScript and XML,异步JavaScript和XML）并不是一项新的技术，它产生的主要目的是用于页面的局部刷新。
 
XMLHttpRequest对象
  在Ajax中主要是通过XMLHttpRequest对象处理发送异步请求和回应的，此对象最早是在IE5中以ActiveX组件的形式出现的，一直到
   2005年以后才被广泛地使用。而如果要创建一个XMLHttpRequest对象则必须使用JavaScript，创建的语句如下：
   <script type="text/javascript">
  var xmlHttp ;                                                        Ajax核心对象名称
  function createXMLHttp(){                                            创建XMLHTTPRequest核心对象
	  if(window.XMLHttpRequest){                                       判断当前使用的浏览器类型
		  xmlHttp=new XMLHttpRequest();                                表示使用的是FireFox内核的浏览器
	  }else{                                                          
		  xmlHttp=new ActiveXObject("Microsoft.XMLHTTP");              表示使用的是IE内核的浏览器
	  }
  }
  </script>
  XMLHttpRequest对象对象中定义了很多属性
  属性                                                                  描述
  onreadystatechange                                                    指定当readState状态改变时使用的操作，一般用于指定具体的回调函数
  readyState                                                            返回当前请求的状态，只读
  responseBody                                                          将回应信息正文以unsigned byte数组形式返回，只读
  responseStream                                                        以Ado Stream对象的形式返回响应信息，只读
  responseSText                                                         接受以普通文本返回的数据，只读
  status                                                                返回当前请求的http状态码，只读
  statusText                                                            返回当前行的响应行状态，只读
  
  readyState一共有5种取值：
  0：请求没有发出（在调用open()函数之前）
  1：请求已经建立但还没有发出（在调用send()函数之前）
  2：请求已经发出正在处理之中（这里通常可以从响应得到头部内容）。
  3：请求已经处理，正在接受服务器的信息，响应中通常有部分数据可用，但是服务器还没有完成响应
  4：响应已经完成，可以访问服务器响应并使用它
  
  在使用XMLHttpRequest对象进行操作时也要使用到此对象中的方法
  方法                                                                  描述
  abort()                                                               取消当前所发出的HTTP头部信息
  getAllResponseHeaders()                                               取得所有的HTTP头信息
  getResponseHeader()                                                   取得一个指定的HTTP头信息
  open()                                                                创建一个HTTP请求，并指定请求模式，如GET请求或POST请求
  send()                                                                将创建的请求发送到服务器端，并接受回应信息
  setRequestHeader()                                                    设置一个指定请求的HTTP头信息

  
  
异步验证



 regist.html
 
 
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<script type="text/javascript">
  var xmlHttp ;
  var flag;
  function createXMLHttp(){
	  if(window.XMLHttpRequest){
		  xmlHttp=new XMLHttpRequest();
	  }else{
		  xmlHttp=new ActiveXObject("Microsoft.XMLHTTP");
	  }
  }
  function checkUserid(userid){
	  createXMLHttp();
	  xmlHttp.open("POST","CheckServlet?="+userid);
	  xmlHttp.onreadystatechange = checkUseridCallback ;
	  xmlHttp.send(null);
  }
  function checkUseridCallback(){
  	if(xmlHttp.readyState==4){
  		if(xmlHttp.status==200){
  			var text = xmlHttp.responseText;
			  document.getElementById("msg").innerHTML=text;
  			if(text=="true"){
  				flag=false;
  				document.getElementById("msg").innerHTML="用户名重复，不能注册";
  			}else{
  				flag=true;
  				document.getElementById("msg").innerHTML="可以注册";
  			}
  		}
  	}
  }
  function checkForm(){
  	return flag;
  }
</script>
<form action="" method="POST" onsubmit="return checkForm()">
用户名ID:<input type="text" name="userid" onblur="checkUserid(this.value)"><span id="msg"></span><br>
姓&nbsp;&nbsp;&nbsp;名：<input type="text" name="name"><br>
密&nbsp;&nbsp;&nbsp;码：<input type="text" name="password"><br>
<input type="submit" name="submit">
</form>
</body>
</html>



CheckServlet.java



package ajaxdemo;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
public class CheckServlet extends HttpServlet{
	private static final String DRIVER = "com.mysql.jdbc.Driver";
	private static final String URL = "jdbc:mysql://localhost:3306/mldn";
	private static final String ROOT = "root";
	private static final String PASSWORD = "wt2016210989";
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		Connection conn = null;
		PreparedStatement ptmt =null;
		String userid = req.getParameter("userid");
		PrintWriter pw =resp.getWriter();
		try {
			Class.forName(DRIVER);
			conn =  DriverManager.getConnection(URL, ROOT, PASSWORD);
			String sql = "select * from user where userid=?";
			ptmt = conn.prepareStatement(sql);
			ptmt.setString(1, userid);
			ResultSet rs = ptmt.executeQuery();
			if(rs.next()){
				if(rs.getInt(1)>0){
					pw.print("true");
				}else{
					pw.print("false");
				}
			}
			System.out.println("1");
		} catch ( Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// TODO Auto-generated method stub
		this.doGet(req, resp);
	}
}
 