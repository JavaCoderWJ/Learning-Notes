JabaBean简介
  JavaBean是使用Java语言开发的一个可重用的组件，在JSP开发中可以使用JavaBean减少重复代码，使jsp页面更整洁
  JavaBean的优点：
    1.代码分离，便于维护
	2.写成重复组件，节省开发时间
  JSP提供JavaBean的标签来操作简单类，则此类必须，满足如下开发要求：
    1.所有的类必须放在一个包中，在web中没有包的类是不存在的
	2.所有的类必须声明为public class ，这样才能被外部调用
	3.类中所有的属性都必须封装，即使用private声明
	4.封装的属性如果需要被外部所操作，则必须编写对应的setter、getter 方法
	5.一个JavaBean钟至少存在一个无参构造函数，此方法为JSP中的标签使用
	其原因是要实现可序列化接口（java.io.Serializable接口），属性声明为私有，没有公有的属性，属性值xxx对
	应有getXxx和setXxx方法。每个JavaBean的类中应该提供一个不带参数的默认构造函数，以便构造工具能够实例化
	其对象。当然还应该有带参数的构造函数以便能够对它进行初始化。
	
使用JavaBean
  
  1.在JSP中可以用<%@ page import="classpath"%>来导入
  2.使用<jsp:useBean id="实例化对象名称" scope="保存范围" class="包.类名称"/>（此时Tomcat后台实例化队形，所以需要无参构造函数）
  
  使用<Context path="" docBase="" reloadable="true"/>代码
  可以设置TOmcat自动加载操作，这样即使不重新启动服务器JavaBean修改后也会被自动加载进来，便于来发过程中的JavaBean频繁改动
  但是这种情况只适合开发。因为reloable自动加载后，服务器将始终处于监视状态，一旦发现修改后就要立即加载，运行的性能低，所以项目发布
  运行后一定要将reloadable的内容设置成为false，以提升服务器的运行性能。
  如果重新加载了新的JavaBean，则在Tomcat后台将出现以下提示信息：
  信息：Reloadabling this Context has started
  另外，当Tomcat重新加载过后，所有的操作都将初始化，所有设置过的session属性都将消失
  
  <jsp:useBean>之所以可以直接对对象进行对象实例化是依靠反射机制，在实例是需要提供包类名，而且又要求类中存在无参构造函数，这些都是
  反射操作的前提条件，所有该操作实际上属于反射机制的操作实现。
  
  设置属性：<jsp:setPrpperty>
  设置属性操作
  类型                        语法格式
  自动匹配                   <jsp:setProperty name="实例化对象的名称" property="*"/>  
  指定匹配                   <jsp:setProperty name="实例化对象的名称" property="属性名称"/>
  指定参数                   <jsp:setProperty name="实例化对象的名称" property="属性名称" param="参数名称"/>
  指定内容                   <jsp:setProperty name="实例化对象的名称" property="属性名称" value="内容"/>
  在自动匹配的时候也是通过反射完成操作，在反射机制中可以通过getMethod()方法取得一个指定名称方法的Method方法，在这里传入的是方法
  的名称，可以根据属性的名称找到对应的setter()方法，完成属性内容的设置。传入属性的名称必须和类属性的名称一致。
  
  取得属性：<jsp:getProperty />
  取得属性只有一种语法：<jsp:getProperty name="实例化对象名称" property="属性名称"/>
  
  JavaBean的保存范围由scope设置，对应4种范围
  如果不为page跳转，在其他页面存在相同名称的对象，容器不会实例化多个。
  
  JavaBean的删除
  提供四种范围的属性删除：pageContext.removeAttribute();
                          request.removeAttribute();
						  session.removeAttribute();
						  application.removeAttribute();
  
  